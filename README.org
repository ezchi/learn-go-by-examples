* My journey of learning Go
This journey start with follow https://go.dev/doc/tutorial/.

** Getting started
*** Hello World
**** Create the directory
#+begin_src sh
  mkdir hello
#+end_src

#+RESULTS:

**** Enable dependency tracking for the code
To enable the tracking by create the =go.mod= file, run the =go mod
init= command as below with =example/hello= as name of this example
code.

#+begin_src sh :dir ./hello
  go mod init example/hello
#+end_src

**** First code
The first hello world code is in [[file:hello/main.go][hello/main.go]]

**** Run the first code with =go run= command
#+begin_src sh :dir ./hello :results org
  go run .
#+end_src

#+RESULTS:
#+begin_src org
Hello, World!
#+end_src

*** Call code in external package
This session will learn how to add external package as example and call code in that package.

** Create a Go module

*** Start a module that others can use

**** Create greating directory
#+begin_src sh
  mkdir -p greetings
#+end_src

#+RESULTS:

**** Initialize module
#+begin_src sh :dir greetings
  go mod init example.com/greetings
#+end_src

#+RESULTS:

**** Add example code to [[file:greetings/greetings.go::package greetings][greetings.go]]

*** Call code from another module
**** Add example code to [[file:hello/main.go::package main][hello/main.go]]
**** Replace module with local module
#+begin_src sh :dir hello
  go mod edit -replace example.com/greetings=../greetings
#+end_src
**** Tidy go.mod
#+begin_src sh :dir hello
  go mod tidy
#+end_src
**** Run the new code
#+begin_src sh :dir hello :results org
  go run .
#+end_src

#+RESULTS:
#+begin_src org
Hi, Gladys. Welcome!
#+end_src
** Return and handle an error
*** Add return error to [[file:greetings/greetings.go::package greetings][greetings.go]]
*** Add error handle to [[file:hello/main.go::package main][hello/main.go]]
*** Run the code
#+begin_src sh :dir hello :results org
  go run .
#+end_src
** Return a random greeting
*** Add random greeting message to [[file:greetings/greetings.go::package greetings][greetings/greetings.go]]
*** Run the code
#+begin_src sh :dir hello :results org
  go run .
#+end_src

#+RESULTS:
#+begin_src org
Great to see you, Glady!
#+end_src
** Return greetings for multiple people
** Add a test
*** Run test
#+begin_src sh :dir greetings :results org
  go test -v
#+end_src

#+RESULTS:
#+begin_src org
=== RUN   TestHelloName
--- PASS: TestHelloName (0.00s)
=== RUN   TestHelloEmpty
--- PASS: TestHelloEmpty (0.00s)
PASS
ok  	example.com/greetings	0.005s
#+end_src

** Compile and install the application
*** Compile the application
#+begin_src sh :dir hello
  go build
#+end_src
*** Install the application
#+begin_src sh :dir hello
  go install
#+end_src

** Accessing a relational database
[[https://go.dev/doc/tutorial/database-access]]
*** Create a folder
#+begin_src sh
  mkdir -p workspaces/data-access/
#+end_src

#+begin_src sh :dir workspaces/data-access
  go mod init example/data-access
#+end_src

Add data-access to workspaces
#+begin_src sh :dir workspaces
  go work use data-access
#+end_src

*** Setup a database
:PROPERTIES:
:header-args:sh+: :dir workspaces/data-access
:END:
#+begin_src sh
  mysql -u root -p
#+end_src

#+RESULTS:
*** Get a database handle and connect
:PROPERTIES:
:header-args:sh+: :dir workspaces/data-access
:END:
Use =root= without password
#+begin_src sh
  export DBUSER="root"
  export DBPASS=""
  go run .
#+end_src

#+RESULTS:
: Connected!

*** Query multiple rows
